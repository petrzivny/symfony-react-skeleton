events {
  worker_connections 768;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    gzip on;

    server {
        listen 8080;
        server_name symfony-react-skeleton;
        # proc to tady nenechas jako default?

        set $symfonyRoot /var/www/html/public;
        # tohle ve skutecnosti ale neni symfony root, to je jen nginx root, naopak symfony root je /var/www/html ... nejspis tu promennou prejmenuj

        location = /nginx-health {
          return 200;
          access_log off;
          add_header Content-Type text/plain;
        }

        location /api {
            # break = continue to parse the current location.
            # removes /api/ from the beggining of $request_filename and $uri (but does't change $request_uri).
            rewrite ^/api/(.*)$ /$1 break;
            # hele ty rewrity jsou nejaky divoky, nedokazes to udelat bez toho? nemela by naopak aplikace pocitat s tim, ze bezi uvnitr /api, nez ji to podvrhovat a tvarit se ze nebezi?
            try_files $uri @symfonyApi;
            # a na try_files jsi sem nedal vubec root, vis vubec odkud se dedi? nebylo by lepsi sem dat ten public ze symfony?
        }
     
        location / {
        # kdyz tady nemas FE, tak by to melo byt namirene nekam uplne do riti, ne tam kde mas zdrojaky
            root /var/www/html;
            index index.html
            try_files $uri =404;
            # ... pripadne to natvrdo servirovat index.html, at ti to nikdo nebrowsuje jak nema ...
        }
     
        location @symfonyApi {
            root $symfonyRoot;
            fastcgi_pass php-fpm:9000;
            include /etc/nginx/fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $symfonyRoot/index.php;
            # if there is "/api/" both in SCRIPT_NAME and REQUEST_URI, Symfony will treat this as a url prefix and will match the routes without it
            fastcgi_param SCRIPT_NAME /api/index.php;
            # a tady zase to /api pridavas, kdyz jsi ho nahore horko tezko odrizl ... netusim proc
            fastcgi_param REQUEST_URI /api$uri$is_args$args;
            internal;
        }

        # Return 404 for all other php files not matching the front controller.
        # This prevents access to other php files you don't want to be accessible.
        location ~ \.php {
            return 404;
        }

        #proc to tady je, obzvlast v takovemhle rozsahu?
        # Zero trust, the least privilege and giving as minimum as possible information (returning 404) principles are applied.
        # This is the best practice. Example of not permited urls:
        # /index.php
        # /foo.php
        # /foo.php?bar=10
        # /index.php?bar=10
        # /index.php/foo
        # /foo.php/bar
        # /api/index.php
        # /api/foo.php
        # /api/foo.php?bar=10
        # /api/index.php?bar=10
        # /api/index.php/foo
        # /api/foo.php/bar
        # /bar/index.php
        # /bar/foo.php
        # /bar/foo.php?bar=10
        # /bar/index.php?bar=10
        # /bar/index.php/foo
        # /bar/foo.php/bar
        # etc ...
    }
}
